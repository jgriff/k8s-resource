#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
    log "\n\n--[CHECK]-------------------------"
    extractPreviousVersion
    queryForVersions
    filterByName
    filterByCreationOlderThan
    filterByPhases
    filterByJQExpressions
    pareDownVersionInfo
    emitResult
}

extractPreviousVersion() {
    log "\n--> extracting previous version..."
    previous_version=$(jq -r '.version // ""' < $payload)
    log "previous version: $previous_version"
}

queryForVersions() {
    set -o pipefail
    if notSet namespace_arg; then
        log "${red}Warning:${reset}  No namespace configured!  Defaulting to ${blue}--all-namespaces${reset}."
        namespace_arg="--all-namespaces"
    fi
    log "\n--> querying k8s cluster ${blue}'${source_url}'${reset} in namespace ${blue}'$(namespace)'${reset} for ${yellow}'${source_resource_types}'${reset} resources..."
    new_versions=$(kubectl --server=$source_url --token=$source_token --certificate-authority=$source_ca_file  get $source_resource_types $namespace_arg --sort-by='{.metadata.resourceVersion}' -o json | jq '[.items[]]' ) || exit $1
    log "$new_versions"
}

filterByName() {
    FILTER_NAME=$(jq -r '.source.filter.name // ""' < $payload)
    if [ ! -z "$FILTER_NAME" ]; then
        log "\n--> filtering by name '$FILTER_NAME'..."
        new_versions=$(echo "$new_versions" | tr '\r\n' ' ' | jq --arg FILTER_NAME $FILTER_NAME -r '[.[] | select(.metadata.name | test($FILTER_NAME))]')
        log "$new_versions"
    else
        log "\n--> name filter not configured, skipping...."
    fi
}

filterByCreationOlderThan() {
    FILTER_OLDER_THAN=$(jq -r '.source.filter.olderThan // ""' < $payload)
    if [ ! -z "$FILTER_OLDER_THAN" ]; then
        log "\n--> filtering by creation timestamp older than '$FILTER_OLDER_THAN'..."
        new_versions=$(echo $new_versions  | tr '\r\n' ' ' | jq --argjson MAX_AGE $(( $(date +%s) - $FILTER_OLDER_THAN)) -r '[.[] | select(.metadata.creationTimestamp | fromdate | tonumber | select(. < $MAX_AGE)) ]')
        log "$new_versions"
    else
        log "\n--> creation timestamp (older than) filter not configured, skipping...."
    fi
}

filterByPhases() {
    FILTER_PHASES=$(jq -r '.source.filter.phases // ""' < $payload)
    if [ ! -z "$FILTER_PHASES" ]; then
        # remove any duplicates
        FILTER_PHASES=$(echo "$FILTER_PHASES" | jq 'unique')

        log "\n--> filtering by phases '$FILTER_PHASES'..."
        new_versions=$(echo "$new_versions" | tr '\r\n' ' ' | jq --argjson FILTER_PHASES "$FILTER_PHASES" -r '[.[] | select(.status.phase as $candidate | $FILTER_PHASES[] as $required | $candidate == $required)]')
        log "$new_versions"
    else
        log "\n--> phases filter not configured, skipping...."
    fi
}

filterByJQExpressions() {
    FILTER_OPERATOR=$(jq -r '.source.filter.jq_operator // ","' < $payload)
    FILTER_TRANSFORM=$(jq -r '.source.filter.jq_transform // ""' < $payload)
    FILTER_QUERY=$(jq -r ".source.filter.jq // [] | join(\" ${FILTER_OPERATOR} \") // \"\"" < $payload)
    if [ ! -z "$FILTER_QUERY" ]; then
        log "\n--> filtering by JQ query: '$FILTER_QUERY'"
        if [ -n "$FILTER_TRANSFORM" ]; then
           FILTER_TRANSFORM="| $FILTER_TRANSFORM"
           log "\n       with transformation: '$FILTER_TRANSFORM'"
        fi
        new_versions=$(echo "$new_versions" | tr '\r\n' ' ')
        new_versions=$(echo "$new_versions" | jq -r "[.[] | select( $FILTER_QUERY ) ] | unique $FILTER_TRANSFORM")
        log "$new_versions"
    else
        log "\n--> jq filter not configured, skipping...."
    fi
}

pareDownVersionInfo() {
    log "\n--> pairing down version metadata to just uid/version..."
    new_versions=$(echo "$new_versions" | tr '\r\n' ' ' | jq '[.[].metadata] | map({uid,resourceVersion})')
    log "$new_versions"
}

emitResult() {
    log "\n--> all current version(s) to be emitted are: $(echo $new_versions | tr '\r\n' ' ' | jq '.')"

    if [ -z "$previous_version" ]; then
        # no previous version given, this is the first check.... emit just the first of the new versions (if we have one)
        log "\n--> producing initial version..."
        initial_version=$(echo $new_versions | tr '\r\n' ' ' | jq '. | select(length > 0) | .[0]')
        out="[$initial_version]"
    else
        log "\n--> producing current batch of version(s)..."
        out="$new_versions"
    fi

    log "\n--> OUT\n$out"
    jq -n "$out" | jq 'flatten' >&5
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    source $(dirname $0)/common
    main "$@"
fi
