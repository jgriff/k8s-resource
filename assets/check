#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
    log "\n\n--[CHECK]-------------------------"
    extractPreviousVersion
    queryAndFilter
    pareDownVersionInfo
    emitResult
}

extractPreviousVersion() {
    log "\n--> extracting previous version..."
    previous_version=$(jq -r '.version // ""' < $payload)
    log "previous version: $previous_version"
}

pareDownVersionInfo() {
    log "\n--> pairing down version metadata to just uid/version..."
    new_versions=$(echo "$new_versions" | tr '\r\n' ' ' | jq '[.[].metadata] | map({uid,resourceVersion})')
    log "$new_versions"
}

emitResult() {
    log "\n--> all current version(s) to be emitted are: $(echo $new_versions | tr '\r\n' ' ' | jq '.')"

    if [ -z "$previous_version" ]; then
        # no previous version given, this is the first check.... emit just the first of the new versions (if we have one)
        log "\n--> producing initial version..."
        initial_version=$(echo $new_versions | tr '\r\n' ' ' | jq '. | select(length > 0) | .[0]')
        out="[$initial_version]"
    else
        log "\n--> producing current batch of version(s)..."
        out="$new_versions"
    fi

    log "\n--> OUT\n$out"
    jq -n "$out" | jq 'flatten' >&5
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    source $(dirname $0)/common
    source $(dirname $0)/query
    main "$@"
fi
