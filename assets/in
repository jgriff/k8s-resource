#!/bin/bash

set -e

exec 5>&1 # make stdout available as fd 5 for the result
exec 1>&2 # redirect all output to stderr for logging

main() {
    log "\n\n--[IN]-------------------------"
    targetDirectory $1
    extractVersion
    fetchResource
    emitResult
}

targetDirectory() {
    target_dir=${1:-`echo $TMPDIR`}
    log "\n--> Target directory is: $target_dir"
}

extractVersion() {
    log "\n--> extracting version..."
    version=$(jq -r '.version // ""' < $payload)
    log "Was given version: $version"
    uid=$(jq -r '.uid | select(.!=null)' <<< $version)
    resourceVersion=$(jq -r '.resourceVersion | select(.!=null)' <<< $version)

    if [ -z "$uid" ] || [ -z "$resourceVersion" ]; then
        log "${red}Warning:${reset}  Both 'version.uid' and 'version.resourceVersion' are required to fetch the resource!  If this is the implicit 'get' after a 'put', then this is expected (and can be ignored)."
        jq -n "{ \"version\": $version }" >&5
        exit 0
    fi
}

fetchResource() {
    if notSet namespace_arg; then
        log -p "${red}Warning:${reset}  No namespace configured!  Defaulting to ${blue}--all-namespaces${reset}."
        namespace_arg="--all-namespaces"
    fi

    # fetch the requested resource
    log -p "\n--> Retrieving ${yellow}${source_resource_types}${reset} resource ${cyan}$uid${reset} at version ${cyan}$resourceVersion${reset} from cluster at ${blue}${source_url}${reset} in namespace ${blue}$(namespace)${reset}..."
    eval "kubectl --server=${source_url} --token=${source_token} ${certificate_arg} get ${source_resource_types} ${namespace_arg} --sort-by={.metadata.resourceVersion} -o json" \
          | jq --arg uid ${uid} --arg resourceVersion ${resourceVersion} '.items[] | select((.metadata.uid == $uid and .metadata.resourceVersion == $resourceVersion))' \
     > $target_dir/resource.json
}

emitResult() {
    if [ -s "$target_dir/resource.json" ]; then
        if ! isSensitive; then
            log -j -p "$(cat $target_dir/resource.json)"
        fi

        jq -n "{
          version: {
            uid: \"$uid\",
            resourceVersion: \"$resourceVersion\"
          },
          metadata: $(cat $target_dir/resource.json | jq '.metadata | to_entries | [.[] | .["name"] = .key | del(.key)]')
        }" | jq '{version: .version} + {metadata: [.metadata[] | select((.value | strings) and (.value != ""))]}' >&5
    else
        # file is empty, which means the resource wasn't available
        log -p "${red}Resource not found!${reset}\nIt has either been deleted, or it could be that the resource has been \
            updated and has a version newer than ${yellow}'$resourceVersion'${reset}.  \
            If that is the case, a new (Concourse) version of the resource should follow after this one."
        exit 1
    fi
}

if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    source $(dirname $0)/common
    main "$@"
fi
