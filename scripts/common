#!/bin/bash

# colors
export esc=$(printf '\033')
export red=${esc}$(printf '[31m')
export yellow=${esc}$(printf '[33m')
export blue=${esc}$(printf '[34m')
export cyan=${esc}$(printf '[36m')
export white=${esc}$(printf '[37m')
export reset=${esc}$(printf '[0m')

log() {
    # accept args
    while test $# -gt 0; do
      case "$1" in
          -p|--public)
              shift
              PUBLIC=true
              ;;
          -j|--json)
              shift
              JSON=true
              ;;
          *)
              break
              ;;
      esac
    done

  # if the arg given is json, pretty print it
  if [ "$JSON" = true ]; then
    echo $1 | tr '\r\n' ' ' | jq -r '.' >> /tmp/resource.log
  else
    echo -e $1 >> /tmp/resource.log
  fi

  # also echo this to stdout so it shows up in concourse ui console
  if [ "$PUBLIC" = true ]; then
      if [ "$JSON" = true ]; then
        echo $1 | tr '\r\n' ' ' | jq -r '.'
      else
        echo -e $1
      fi
  fi
}

isTrue() {
    if notSet $1; then
        return 1;
    else
        eval varVal=\$$1;
        if ! [[ $varVal = true ]]; then
            return 1;
        fi
    fi
}

notTrue() {
    if ! notSet $1; then
        eval varVal=\$$1;
        if [[ $varVal = true ]]; then
            return 1;
        fi
    fi
}

isSet() {
    eval varVal=\$$1;
    if [ -z "$varVal" ]; then return 1; fi
    return 0;
}

notSet() {
    eval varVal=\$$1;
    if [ -z "$varVal" ]; then return 0; fi
    return 1;
}

isSensitive() {
    if isTrue params_sensitive; then return 0; fi
    if isTrue source_sensitive && notSet params_sensitive; then return 0; fi
    return 1;
}

payload=$(mktemp /tmp/resource-in.XXXXXX)
cat > $payload <&0

# source config
source_url=$(jq -r '.source.url // ""' < $payload)
source_token=$(jq -r '.source.token // ""' < $payload)
source_ca=$(jq -r '.source.certificate_authority // ""' < $payload)
source_resource_types=$(jq -r '.source.resource_types // "pod"' < $payload)
source_namespace=$(jq -r '.source.namespace | select(.!=null)' < $payload)
source_sensitive=$(jq -r '.source.sensitive | select(.!=null)' < $payload)

# write the ca file out (have to pass a file ref to kubectl)
source_ca_file=$(mktemp /tmp/resource-ca_file.XXXXXX)
echo "$source_ca" > "$source_ca_file"

# craft a var for specifying the namespace
if isSet source_namespace; then
    namespace_arg="-n $source_namespace"
else
    namespace_arg="--all-namespaces"
fi

# params config
params_sensitive=$(jq -r '.params.sensitive  | select(.!=null)' < $payload)