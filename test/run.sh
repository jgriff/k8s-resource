#!/bin/bash

set -e

esc=$(printf '\033')
red=${esc}$(printf '[31m')
green=${esc}$(printf '[32m')
yellow=${esc}$(printf '[33m')
white=${esc}$(printf '[37m')
blue=${esc}$(printf '[34m')
teal=${esc}$(printf '[36m')
reset=${esc}$(printf '[0m')
icon_image_build='📀'
icon_destroy='🔥'
icon_success='✔︎'
icon_fail='❌︎'
icon_unknown='⚠️'
icon_running_tests='⚖️ '
icon_shell_session='💻'
icon_cleanup='🧹'
icon_clean='✨'

DEFAULT_SUT_IMAGE="k8s-resource:sut"
TEST_IMAGE="k8s-resource-tests"

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
PROJECT_HOME="$(dirname "${THIS_DIR}")"

main() {
    captureArgs "$@"

    if isTrue CMD_ALL || isTrue CMD_CHECK || isTrue CMD_IN || isTrue CMD_OUT || isTrue CMD_SHELL; then
        buildSutImageIfNecessary
        buildTestImage

        if isTrue CMD_SHELL; then
            openShellSession
        else
            runTests
        fi
    fi

    # clean by default, unless we were told to keep everything -OR- we were explicitly told to clean
    if notTrue OPTION_KEEP || isTrue CMD_CLEAN; then
        cleanup
    fi

    assertTestResults
}

usage() {
    echo "Runs unit tests against a specified image."
    echo ""
    echo "Usage:"
    echo "  ${green}run.sh${reset} [OPTIONS] [COMMANDS]"
    echo ""
    echo "OPTIONS"
    echo "  -i string       The image to test.  If not specified, the project image will be built first (tagged as ${yellow}${DEFAULT_SUT_IMAGE}${reset})."
    echo "  -k              Keep image(s) created by this script (do not destroy in cleanup)."
    echo "  -v              Verbose output."
    echo "  -h              Show this help message".
    echo ""
    echo "COMMANDS"
    echo "  all             Run all tests (default)."
    echo "  check           Run tests for just the 'check' script."
    echo "  in              Run tests for just the 'in' script."
    echo "  out             Run tests for just the 'out' script."
    echo "  shell           Launch into a shell in the test container, mounting the project directory.  Useful for local development (running the tests manually)."
    echo "  clean           Removes all images created by this test script (always performed automatically unless -k option is specified)."
    echo ""
    echo "Examples:"
    echo "  ${blue}# build the project image, then run all tests against it ${reset}"
    echo "  ${green}./run.sh${reset}"
    echo ""
    echo "  ${blue}# build the project image, then run the 'check' tests against it ${reset}"
    echo "  ${green}./run.sh${reset} check"
    echo ""
    echo "  ${blue}# build the project image, then run the 'check' and 'in' tests against it ${reset}"
    echo "  ${green}./run.sh${reset} check in"
    echo ""
    echo "  ${blue}# build the project image, then open a shell into the test container mounted with the project dir (development) ${reset}"
    echo "  ${green}./run.sh${reset} shell"
    echo ""
    echo "  ${blue}# run all tests against a specific tag ${reset}"
    echo "  ${green}./run.sh${reset} -i k8s-resource:my-dev"
    echo ""
    echo "  ${blue}# run 'check' tests against a specific tag ${reset}"
    echo "  ${green}./run.sh${reset} -i k8s-resource:my-dev check"
    echo ""
    echo "  ${blue}# run 'check' and 'in' tests against a specific tag ${reset}"
    echo "  ${green}./run.sh${reset} -i k8s-resource:my-dev check in"
    echo ""
    echo "  ${blue}# open a shell into the test container built atop a specific tag ${reset}"
    echo "  ${green}./run.sh${reset} -i k8s-resource:my-dev shell"
    echo ""
    echo "  ${blue}# remove all images generated by this script ${reset}"
    echo "  ${green}./run.sh${reset} clean"
}

captureArgs() {
    # options
    while getopts ":i:kvh" opt; do
      case ${opt} in
        i) SUT_IMAGE=$OPTARG ;;
        k) OPTION_KEEP=true ;;
        v) OPTION_VERBOSE=true ;;
        h) usage; exit 0 ;;
        \? )
         echo "Invalid Option: -$OPTARG" 1>&2
         exit 1
         ;;
      esac
    done
    shift $((OPTIND -1))

    # commands
    if [ $# -eq 0 ]; then
        # default to all if no commands are given
        CMD_ALL=true
    else
        for CMD in "$@" ; do
            if [ "$CMD" = "all" ]; then
                CMD_ALL=true
            elif [ "$CMD" = "check" ]; then
                CMD_CHECK=true
            elif [ "$CMD" = "in" ]; then
                CMD_IN=true
            elif [ "$CMD" = "out" ]; then
                CMD_OUT=true
            elif [ "$CMD" = "shell" ]; then
                CMD_SHELL=true
            elif [ "$CMD" = "clean" ]; then
                CMD_CLEAN=true
            else
                echo "${red}Unknown command:${reset} $CMD"
                echo "See help (-h)."
                exit 1
            fi
        done
    fi
}

buildSutImageIfNecessary() {
    if [[ -z "${SUT_IMAGE}" ]]; then
        echo "${red}No image specified!${reset}  Will attempt to first build the image to be tested."
        echo "${icon_image_build} ${blue}Building${reset} image to test from '${yellow}${PROJECT_HOME}${reset}' as '${yellow}${DEFAULT_SUT_IMAGE}${reset}' ..."
        verboseFilter docker build -t ${DEFAULT_SUT_IMAGE} "${PROJECT_HOME}"
        SUT_IMAGE=${DEFAULT_SUT_IMAGE}
    fi
}

buildTestImage() {
    echo "${icon_image_build} ${blue}Building${reset} test image '${yellow}${TEST_IMAGE}${reset}' based on '${yellow}${SUT_IMAGE}${reset}' ..."
    verboseFilter docker build -t ${TEST_IMAGE} --build-arg SUT_IMAGE=${SUT_IMAGE} "${THIS_DIR}"
}

runTests() {
    TESTS_TO_RUN="" # run all tests by default (do not pass a CMD arg to the test container)
    if isTrue CMD_ALL; then
        TESTS_TO_RUN=""
    else
        if isTrue CMD_CHECK; then
            TESTS_TO_RUN+="check.bats "
        fi
        if isTrue CMD_IN; then
            TESTS_TO_RUN+="in.bats "
        fi
        if isTrue CMD_OUT; then
            TESTS_TO_RUN+="out.bats "
        fi
    fi

    echo "${icon_running_tests} ${blue}Running${reset} tests ${yellow}${TESTS_TO_RUN}${reset}..."
    docker run --rm ${TEST_IMAGE} ${TESTS_TO_RUN}
    TEST_RESULT=success
}

openShellSession() {
    echo "${icon_shell_session} ${blue}Opening${reset} shell session in ${yellow}${TEST_IMAGE}${reset} container ..."
    echo -e "\nUsage:"
    echo -e "    bats <tests-to-run>"
    echo -e "Examples:"
    echo -e "    bats test             - run all tests"
    echo -e "    bats test/check.bats  - run all tests for 'check'"
    echo -e "    bats test/in.bats     - run all tests for 'in'"
    echo -e "    bats test/out.bats    - run all tests for 'out'"
    echo -e ""
    docker run --rm -it -v ${PROJECT_HOME}:/code -w /code -e SUT_ASSETS_DIR=/code/assets --entrypoint /bin/bash ${TEST_IMAGE}
    TEST_RESULT=shell
}

cleanup() {
    echo "${icon_cleanup} Cleaning up ..."
    echo "${icon_destroy} ${blue}Deleting${reset} test image '${yellow}${TEST_IMAGE}${reset}' ..."
    verboseFilter docker image rm -f ${TEST_IMAGE}
    echo "${icon_destroy} ${blue}Deleting${reset} sut image '${yellow}${DEFAULT_SUT_IMAGE}${reset}' ..."
    verboseFilter docker image rm -f ${DEFAULT_SUT_IMAGE}
    echo "${icon_clean} All clean!"
}

assertTestResults() {
    if testsSuccessful; then
        echo -e "\n${green}${icon_success} Tests Successful!${reset}"
    elif testsFailed; then
        echo -e "\n${red}${icon_fail} Tests Failed!${reset}"
        exit 1
    fi
}

testsSuccessful() { [ "$TEST_RESULT" = success ] || return 1; }
testsFailed() { [ "$TEST_RESULT" = failed ] || return 1; }
testsShell() { [ "$TEST_RESULT" = shell ] || return 1; }

###############################################
# Helper Functions
###############################################

verboseFilter() {
    if isTrue OPTION_VERBOSE; then
        # let it all go
        $@
    else
        # swallow output
        $@ &> /dev/null
    fi
}

isTrue() {
    if notSet $1; then
        return 1;
    else
        eval varVal=\$$1;
        if ! [[ $varVal = true ]]; then
            return 1;
        fi
    fi
}

notTrue() {
    if ! notSet $1; then
        eval varVal=\$$1;
        if [[ $varVal = true ]]; then
            return 1;
        fi
    fi
}

isSet() {
    eval varVal=\$$1;
    if [ -z "$varVal" ]; then return 1; fi
    return 0;
}

notSet() {
    eval varVal=\$$1;
    if [ -z "$varVal" ]; then return 0; fi
    return 1;
}

###############################################
# Main
###############################################
main "$@"
